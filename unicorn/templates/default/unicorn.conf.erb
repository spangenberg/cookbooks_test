worker_processes <%= node[:unicorn][:worker_processes] %>

user "<%= @deploy[:user]%>"

working_directory "<%= @deploy[:deploy_to]%>/current"

listen "<%= @deploy[:deploy_to]%>/shared/sockets/unicorn.sock", :backlog => <%= node[:unicorn][:backlog] %>

timeout <%= node[:unicorn][:timeout] %>

pid "<%= @deploy[:deploy_to]%>/shared/pids/unicorn.pid"

stderr_path "<%= @deploy[:deploy_to]%>/shared/log/unicorn.stderr.log"
stdout_path "<%= @deploy[:deploy_to]%>/shared/log/unicorn.stdout.log"

# combine REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app <%= node[:unicorn][:preload_app] %>
GC.copy_on_write_friendly = true if GC.respond_to?(:copy_on_write_friendly=)

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end
end

after_fork do |server, worker|
  # the following is *required* for Rails + "preload_app true",
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)
end
